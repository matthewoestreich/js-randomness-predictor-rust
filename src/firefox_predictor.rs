use crate::errors::InitError;
use z3::{self, Config, Context, SatResult, Solver, ast::*};

pub struct FirefoxPredictor {
  sequence: Vec<f64>,
  is_solved: bool,
  conc_state_0: u64,
  conc_state_1: u64,
}

impl FirefoxPredictor {
  const SS_0_STR: &str = "sym_state_0";
  const SS_1_STR: &str = "sym_state_1";

  pub fn new(seq: Vec<f64>) -> Self {
    FirefoxPredictor {
      sequence: seq,
      is_solved: false,
      conc_state_0: 0,
      conc_state_1: 0,
    }
  }

  #[allow(dead_code)]
  pub fn sequence(&self) -> &[f64] {
    return &self.sequence;
  }

  pub fn predict_next(&mut self) -> Result<f64, InitError> {
    self.solve_symbolic_state()?; // if solving fails, error is returned early
    let v = self.xor_shift_128_plus_concrete();
    Ok(self.to_double(v))
  }

  fn xor_shift_128_plus_concrete(&mut self) -> u64 {
    let mut s1 = self.conc_state_0;
    let s0 = self.conc_state_1;
    self.conc_state_0 = s0;
    s1 = s1 ^ s1 << 23;
    self.conc_state_1 = s1 ^ s0 ^ (s1 >> 17) ^ (s0 >> 26);
    return self.conc_state_1.wrapping_add(s0);
  }

  fn to_double(&self, value: u64) -> f64 {
    return ((value & 0x1FFFFFFFFFFFFF) as f64) / ((1u64 << 53) as f64);
  }

  fn solve_symbolic_state(&mut self) -> Result<(), InitError> {
    if self.is_solved {
      return Ok(());
    }

    let config = Config::new();
    let context = Context::new(&config);
    let solver = Solver::new(&context);

    let mut sym_state_0 = z3::ast::BV::new_const(&context, Self::SS_0_STR, 64);
    let mut sym_state_1 = z3::ast::BV::new_const(&context, Self::SS_1_STR, 64);

    for &observed in &self.sequence {
      Self::xor_shift_128_plus_symbolic(&context, &mut sym_state_0, &mut sym_state_1);
      Self::constrain_mantissa(observed, &context, &solver, &sym_state_0, &sym_state_1);
    }

    if solver.check() != SatResult::Sat {
      return Err(InitError::Unsat);
    }

    let model = solver.get_model().ok_or(InitError::MissingModel)?;

    self.conc_state_0 = model
      .eval(&sym_state_0, true)
      .ok_or(InitError::EvalFailed(Self::SS_0_STR))?
      .as_u64()
      .ok_or(InitError::ConvertFailed(Self::SS_0_STR))?;

    self.conc_state_1 = model
      .eval(&sym_state_1, true)
      .ok_or(InitError::EvalFailed(Self::SS_1_STR))?
      .as_u64()
      .ok_or(InitError::ConvertFailed(Self::SS_1_STR))?;

    self.is_solved = true;
    return Ok(());
  }

  // Static 'helper' method
  fn xor_shift_128_plus_symbolic<'a>(
    context: &'a Context,
    state_0: &mut BV<'a>,
    state_1: &mut BV<'a>,
  ) {
    let state_0_shifted_left = state_0.bvshl(&BV::from_u64(context, 23, 64));
    let mut s1 = &*state_0 ^ state_0_shifted_left;
    let s1_shifted_right = s1.bvlshr(&BV::from_u64(context, 17, 64));

    s1 = s1 ^ s1_shifted_right;
    s1 = s1 ^ state_1.clone();
    s1 = s1 ^ state_1.bvlshr(&BV::from_u64(context, 26, 64));
    std::mem::swap(state_0, state_1);
    *state_1 = s1;
  }

  // Static 'helper' method
  fn constrain_mantissa(
    value: f64,
    context: &Context,
    solver: &Solver,
    state_0: &BV,
    state_1: &BV,
  ) {
    let sum = state_0.bvadd(state_1);
    let symbolic_mask = BV::from_u64(context, 0x1FFFFFFFFFFFFF, 64);
    let masked = sum.bvand(&symbolic_mask);
    let mantissa = (value * (1u64 << 53) as f64) as u64;
    let constraint = BV::from_u64(context, mantissa, 64)._eq(&masked).simplify();
    solver.assert(&constraint);
  }
}

#[cfg(test)]
mod tests {
  use std::error::Error;

  #[test]
  fn correctly_predicts_sequence() -> Result<(), Box<dyn Error>> {
    let pool = vec![
      0.5865531271930553,
      0.5541046114391099,
      0.21640895758393563,
      0.7795614489825657,
      0.45436917267245447,
      0.23093540482617203,
      0.38347603573221434,
      0.5711709968714335,
      0.30456387778967864,
      0.8339269908305158,
      0.452233580000003,
      0.9901079314416401,
      0.32987341924464075,
      0.8988042405156045,
      0.49552711891551626,
      0.15029415930638967,
      0.3937939136620475,
      0.5314000592309004,
      0.4137690151782778,
      0.6762320890566726,
      0.30490045333928995,
      0.7093972241287271,
      0.02546662110698006,
      0.07499228034961558,
      0.5360209481813598,
      0.6698034264516716,
      0.6193136766571286,
      0.3303181016773604,
      0.9518393946238296,
      0.4487411266188046,
      0.8007864085923057,
      0.8146967187664399,
      0.2901950937777532,
      0.8953227326794915,
      0.7361031066039209,
      0.8987370273886456,
      0.951031741251198,
      0.4091339852815272,
      0.9240165078425672,
      0.8962808277375502,
      0.11925094767049316,
      0.6784859133555188,
      0.07052010777228157,
      0.7577282490015692,
      0.22553130378286845,
      0.2079625910699775,
      0.2474793037417129,
      0.8847355072588861,
      0.009203220460777595,
      0.7314825091606534,
      0.9880363507547771,
      0.2160974225822464,
      0.6043743685351406,
      0.9489747685109242,
      0.5713408814075374,
      0.9603730950150634,
      0.5758706386904255,
      0.07152684677986532,
      0.5826674142710256,
      0.20043688560962214,
      0.09558968499870024,
      0.25048591978527535,
      0.7604745383338725,
      0.8247513469575583,
      0.6719489484014812,
      0.6031207514397643,
      0.2786151887322349,
      0.11696233599010553,
      0.9933163541971937,
      0.6802048660091916,
      0.164275982818593,
      0.5098106908762376,
      0.5251171753643626,
      0.03511608122166543,
      0.4080893060593229,
      0.5753844387901543,
      0.9437270993335143,
      0.8712404063281237,
      0.23884610934192596,
      0.6287422235560856,
      0.7682443480617352,
      0.5557721036062607,
      0.9685451347878308,
      0.10263154582984746,
      0.6000622095511561,
      0.18652287567130887,
      0.9290955404868614,
      0.48073869875383335,
      0.33628038907760527,
      0.34021009749599807,
      0.6478493707667935,
      0.9834206056552957,
      0.9954612050315345,
      0.9613325220552444,
      0.05334644695656576,
      0.7839164925066305,
      0.1723615567246204,
      0.2546300256299039,
      0.547551699464579,
      0.7683498298049048,
      0.6768919225469846,
      0.5698840546440623,
      0.8949865873521787,
      0.2762337213638124,
      0.2914971720512356,
      0.667169971951049,
      0.8788794238635516,
      0.6056983582513188,
      0.6978906292691608,
      0.5084096818222084,
      0.896188269616582,
      0.8667876764604892,
      0.19374598159155731,
      0.4015724745166128,
      0.31064329125730183,
      0.9766275380602045,
      0.8636977734026434,
      0.4627411206679235,
      0.561342325207,
      0.22634904452671867,
      0.37478402343588846,
      0.7542758614904915,
      0.6175364395459599,
      0.3262852870701207,
      0.8455197347573297,
      0.9026190475484023,
      0.6572894771664558,
      0.6519086252140869,
      0.30394338002136867,
      0.7953303525841622,
      0.6099029781271542,
      0.26154318340801785,
      0.6477675585737454,
      0.6333782961115457,
      0.1147088586664452,
      0.21711127276046538,
      0.26381584187088747,
      0.7779240693517507,
      0.3949347796416661,
      0.557392304456174,
      0.24353754703634467,
      0.10435870903782773,
      0.7774359221094169,
      0.5011771001631059,
      0.5359871744048943,
      0.7543614234687356,
      0.9018737462536165,
      0.4256864139358444,
      0.8459955606418031,
      0.10187774474362776,
      0.1322684500759459,
      0.5683879339873796,
      0.6418933999287194,
      0.5180525345593695,
      0.7398367852748235,
      0.04506771148068134,
      0.4040576526684111,
      0.18468061507380096,
      0.037779351685426454,
      0.6347553707870932,
      0.6792680290384384,
      0.9731452716762597,
      0.13864544178261173,
      0.44213204597638234,
      0.05975339784642919,
      0.3380990206481682,
      0.8687528558588666,
      0.3741966792162065,
      0.3597005796257373,
      0.24972730955563194,
      0.5396372344236281,
      0.8003837342188123,
      0.046792261641357746,
      0.6948558885780519,
      0.5815282975242501,
      0.03158783480423033,
      0.509867965086224,
      0.5013656808194861,
      0.5170834567632665,
      0.8065444903386002,
      0.7149598980173147,
      0.34795569026047934,
      0.33346333827030905,
      0.8654948191105245,
      0.24858241341438558,
      0.12499803130944798,
      0.210187765926808,
      0.5617854328417712,
      0.20412667813533958,
      0.17872530426902922,
      0.6554357665881997,
      0.9724241011261335,
      0.5423339454032328,
      0.9079531006399448,
      0.23952948581936262,
      0.1875316127702139,
      0.09697212594220317,
      0.4708546636057608,
      0.1524712450883936,
      0.9070177617745666,
      0.2557818955520905,
      0.9166976165011695,
      0.5944883555486884,
      0.1587066693875202,
      0.8541866326211491,
      0.7245429295344993,
      0.6886648121137378,
      0.5929719106002956,
      0.048398594104920645,
      0.2877472889758885,
      0.016429619433395493,
      0.9482466638914043,
      0.2966126049849438,
      0.7428905512659318,
      0.6273898872583024,
      0.028099004230893065,
      0.5774276166088086,
      0.0800631334684968,
      0.416018164166542,
      0.08341006005719065,
      0.43775565063572475,
      0.5560849832857038,
      0.6782857389644982,
      0.06700454961827529,
      0.22691174275649384,
      0.8242450813155278,
      0.29359123199020254,
      0.997876090157192,
      0.9493194126525922,
      0.5900824457187492,
      0.06298205353343977,
      0.40358747854012833,
      0.024146984264696858,
      0.46015126057899836,
      0.013991861862566513,
      0.04704405615743401,
      0.7851424860050942,
      0.6651216343677179,
      0.41931677510055043,
      0.9146820338235684,
      0.5869038070766122,
      0.6340174106887423,
      0.08400704658818536,
      0.9864832639510085,
      0.7151943759081495,
      0.3853535252534469,
      0.8696424871102053,
      0.0673843955522534,
      0.6239261009143927,
      0.27365977073754477,
      0.13211693865059848,
      0.5688186108785191,
      0.22940558182062598,
      0.016169246164127404,
      0.28470411575884724,
      0.22720230375819672,
      0.7225913099403145,
      0.4259240909387264,
      0.4461122206756156,
      0.7474974204062478,
      0.7659535586398175,
      0.7168309872396994,
      0.317293501331555,
      0.81877150183118,
      0.3120769303620744,
      0.5804152015359736,
      0.3040343619096133,
      0.5816624465829855,
      0.11994238443478811,
      0.2815982796617005,
      0.8234637990003068,
      0.08392555545333702,
      0.2614829907916557,
      0.6437451060548047,
      0.5629730762143647,
      0.29931502438216795,
      0.1595895651244934,
      0.016918360912327124,
      0.5798570627209118,
      0.9758857221663496,
      0.8750217802925053,
      0.11110205308361909,
      0.8104141136207583,
      0.2723349439887208,
      0.6461947788053617,
      0.023351750222622036,
      0.6972976116325138,
      0.34423643145908955,
      0.9368239911656492,
      0.10815197944907251,
      0.9589601798871525,
      0.4143780833046157,
      0.4650665362303995,
      0.3657721527118005,
      0.7841264681613905,
      0.08672269562398693,
      0.7355537227494491,
      0.9272620235009659,
      0.46902105162810703,
      0.9204116180489463,
      0.18522915389671835,
      0.009607131558745818,
      0.08405745608652804,
      0.5284791325060331,
      0.36757385936490594,
      0.06898334407643647,
      0.6909212815973119,
      0.7679142424007818,
      0.37610910303112965,
      0.05208122260543557,
      0.7800602608702812,
      0.7592772264352324,
      0.7328522162362429,
      0.9917619102753855,
      0.3145759590812792,
      0.17520545738747595,
      0.3279156985731282,
      0.04472917454345138,
      0.970756871443966,
      0.4066193447288844,
      0.2610986600840106,
      0.15813875972457836,
      0.20999876205937806,
      0.10994646062452096,
      0.6915366893751249,
      0.8466796288317558,
      0.4767129172207717,
      0.12772079214030696,
      0.3466170672147567,
      0.42317599968776043,
      0.1622062612512022,
      0.2230515025459333,
      0.8107333118415936,
      0.2113749313486628,
      0.5024954410639694,
      0.8482093958964643,
      0.5985244211727975,
      0.86622696414705,
      0.01281216961604914,
      0.5751167715220191,
      0.9444215182478257,
      0.12791631407771153,
      0.07110823492511875,
      0.36665916967948997,
      0.4357763962707135,
      0.013768378613968846,
      0.20290927574440676,
      0.09791792152929635,
      0.25668897581102323,
      0.10415239170668067,
      0.030148133859263293,
      0.39916087076027995,
      0.23937645138057062,
      0.26541527828961586,
      0.23775536399848263,
      0.6981544757966329,
      0.034474379818287826,
      0.15702405712833167,
      0.04933795426694132,
      0.2640040834468361,
      0.9051200924485773,
      0.30460229768182623,
      0.13874070233015756,
      0.5357436895137105,
      0.04145421794947868,
      0.7106841141308103,
      0.3680633229402389,
      0.24190636573812052,
      0.9463928684164328,
      0.9057640453645545,
      0.8623181861032716,
      0.4550286789732636,
      0.4400869943881256,
      0.9065199975671652,
      0.1261459343513971,
      0.06488813423368744,
      0.77791640033145,
      0.5897900639443128,
      0.05756822139642326,
      0.9352171789216979,
      0.12367414156389867,
      0.13042016457468297,
      0.3667417710228327,
      0.8620384416057306,
      0.5362882323005205,
      0.1096425332111729,
      0.3198259239548952,
      0.9757891416632953,
      0.34817402671960895,
      0.9463540208396476,
      0.15124375921444,
      0.10364394924264919,
      0.5560904235518845,
      0.87522829578661,
      0.7419379771918783,
      0.7934003653423422,
      0.8527438840879623,
      0.7124943368375772,
      0.5431301324998252,
      0.07639180390334432,
      0.37395145683192077,
      0.14711038152957956,
      0.8445936201403674,
      0.49413406479527144,
      0.8802394873974577,
      0.42289700616045167,
      0.6884929834272331,
      0.042845740141808974,
      0.6126934059809861,
      0.6792533526966404,
      0.855252611483559,
      0.295896110978891,
      0.4107892217148358,
      0.5609864575170519,
      0.9032304302157587,
      0.8598123832943819,
      0.8416952050262075,
      0.9272969188006049,
      0.9458019435477735,
      0.620841557600415,
      0.9127775366187049,
      0.7368599610719945,
      0.8747772265514103,
      0.007965961452839454,
      0.8700201951667574,
      0.28313110107043704,
      0.08815782041546838,
      0.11300559412778066,
      0.6514507772651915,
      0.16830249695234734,
      0.47723527853843595,
      0.6867684699248284,
      0.7914522117746634,
      0.2803255455335468,
      0.8155838418621151,
      0.5589040133509352,
      0.6309690118548176,
      0.8883016292370474,
      0.5270448338569975,
      0.5425593816046722,
      0.5274784343541568,
      0.9545557277440215,
      0.7318445922843663,
      0.4685847261962366,
      0.2783347870553693,
      0.39825068467133595,
      0.5538107976687636,
      0.03293580343332114,
      0.7932611630237487,
      0.19179487220218683,
      0.0790697008089577,
      0.88403193841529,
      0.03930432846700338,
      0.731919319837637,
      0.09682808939624576,
      0.6158142000636625,
      0.3925786713826186,
      0.6351869378757524,
      0.6992467596275356,
      0.3419461195339333,
      0.6211406096603801,
      0.3261175948501531,
      0.109151633747534,
      0.19807230577737,
      0.8499778579858915,
      0.5698700287332708,
      0.784468708086921,
      0.3570880080965999,
      0.11785052534144869,
      0.18741539899992044,
      0.8297695099948096,
      0.0789934189863013,
      0.5154449414971082,
      0.5214753905634504,
      0.5613884403604991,
      0.41260606327600036,
      0.5476649237174546,
      0.662471909483809,
      0.5049648804369952,
      0.6826486330334145,
      0.6160206170019211,
      0.1545239206745902,
      0.25191006782617,
      0.5051235388041858,
      0.4453697753074036,
      0.5858660214491829,
      0.5307136856458474,
      0.8733801375466267,
      0.26913035286487075,
      0.25651252089632126,
      0.45616771610445594,
      0.19058888987038491,
      0.8508685810625294,
      0.2340826351126558,
      0.4295582037776007,
      0.6273731822388989,
    ];

    //let sequence = vec![
    //  0.1321263101773572,
    //  0.03366887439746058,
    //  0.032596957696410134,
    //  0.9986575482138969,
    //];
    //let expected = vec![
    //  0.8479779907956815,
    //  0.13963871472821332,
    //  0.25068024611907636,
    //  0.6656237481612675,
    //  0.7381091878692425,
    //  0.8709382509549467,
    //  0.49171337524788294,
    //  0.6991749430716799,
    //  0.9530887478758369,
    //  0.781511163650037,
    //  0.699311162730038,
    //];

    let mut ffp = crate::FirefoxPredictor::new(vec![
      0.983788222968869,
      0.6210323993153665,
      0.37646090421893474,
      0.13923801694587312,
    ]);
    let mut predictions = vec![];

    for _ in 0..pool.len() {
      let prediction = ffp.predict_next()?;
      predictions.push(prediction);
    }

    assert_eq!(predictions, pool);
    return Ok(());
  }
}
